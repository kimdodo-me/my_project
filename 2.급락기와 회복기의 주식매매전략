{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## **1.급락기의 전략**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###   **1.1 급락기에 고평가된 주식을 팔아야 하나?(02/19-03/19)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import statsmodels.api as sm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**엑셀 파일 불러오기**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_0219 = pd.read_excel('C:/Users/pc/Desktop/PHW1129_DY.xlsx',\n",
    "                    sheet_name = '0219_RET_PER',\n",
    "                    header = 1,\n",
    "                    index_col = 'NAME')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RETURN</th>\n",
       "      <th>PER</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NAME</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>삼성전자</th>\n",
       "      <td>-0.2865</td>\n",
       "      <td>15.90842</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SK하이닉스</th>\n",
       "      <td>-0.3333</td>\n",
       "      <td>29.86342</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LG화학</th>\n",
       "      <td>-0.4307</td>\n",
       "      <td>85.23787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>삼성바이오로직스</th>\n",
       "      <td>-0.2752</td>\n",
       "      <td>151.14262</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NAVER</th>\n",
       "      <td>-0.2401</td>\n",
       "      <td>43.43138</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>지엘팜텍</th>\n",
       "      <td>-0.5451</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>신원종합개발</th>\n",
       "      <td>-0.4342</td>\n",
       "      <td>2.51176</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>지란지교시큐리티</th>\n",
       "      <td>-0.4080</td>\n",
       "      <td>14.68517</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>코스나인</th>\n",
       "      <td>-0.4428</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>YW</th>\n",
       "      <td>-0.3179</td>\n",
       "      <td>16.76682</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2000 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          RETURN        PER\n",
       "NAME                       \n",
       "삼성전자     -0.2865   15.90842\n",
       "SK하이닉스   -0.3333   29.86342\n",
       "LG화학     -0.4307   85.23787\n",
       "삼성바이오로직스 -0.2752  151.14262\n",
       "NAVER    -0.2401   43.43138\n",
       "...          ...        ...\n",
       "지엘팜텍     -0.5451        NaN\n",
       "신원종합개발   -0.4342    2.51176\n",
       "지란지교시큐리티 -0.4080   14.68517\n",
       "코스나인     -0.4428        NaN\n",
       "YW       -0.3179   16.76682\n",
       "\n",
       "[2000 rows x 2 columns]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_0219"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**PER이 100이상인 아웃라이어들 제외**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "adj=df_0219['PER']<100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_0219 = df_0219[adj]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**회귀분석 실시(독립변수: 급락기간의 PER / 종속변수: 급락기간 기업의 수익률)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>         <td>RETURN</td>      <th>  R-squared:         </th> <td>   0.004</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.004</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   5.535</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Sat, 28 Nov 2020</td> <th>  Prob (F-statistic):</th>  <td>0.0188</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>23:26:12</td>     <th>  Log-Likelihood:    </th> <td>  623.82</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>  1232</td>      <th>  AIC:               </th> <td>  -1244.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>  1230</td>      <th>  BIC:               </th> <td>  -1233.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th> <td>   -0.3952</td> <td>    0.006</td> <td>  -65.062</td> <td> 0.000</td> <td>   -0.407</td> <td>   -0.383</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>PER</th>       <td>   -0.0005</td> <td>    0.000</td> <td>   -2.353</td> <td> 0.019</td> <td>   -0.001</td> <td>-8.97e-05</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>675.613</td> <th>  Durbin-Watson:     </th> <td>   1.918</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td>  <th>  Jarque-Bera (JB):  </th> <td>10842.269</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 2.174</td>  <th>  Prob(JB):          </th> <td>    0.00</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td>16.867</td>  <th>  Cond. No.          </th> <td>    38.7</td> \n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                 RETURN   R-squared:                       0.004\n",
       "Model:                            OLS   Adj. R-squared:                  0.004\n",
       "Method:                 Least Squares   F-statistic:                     5.535\n",
       "Date:                Sat, 28 Nov 2020   Prob (F-statistic):             0.0188\n",
       "Time:                        23:26:12   Log-Likelihood:                 623.82\n",
       "No. Observations:                1232   AIC:                            -1244.\n",
       "Df Residuals:                    1230   BIC:                            -1233.\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "Intercept     -0.3952      0.006    -65.062      0.000      -0.407      -0.383\n",
       "PER           -0.0005      0.000     -2.353      0.019      -0.001   -8.97e-05\n",
       "==============================================================================\n",
       "Omnibus:                      675.613   Durbin-Watson:                   1.918\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):            10842.269\n",
       "Skew:                           2.174   Prob(JB):                         0.00\n",
       "Kurtosis:                      16.867   Cond. No.                         38.7\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg = sm.OLS.from_formula(\"RETURN ~ PER\", df_0219).fit()\n",
    "reg.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**회귀분석 그래프 그리기(with. seaborn)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x205aa23c310>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.lmplot(x=\"PER\", y=\"RETURN\", data=df_0219,robust = True,line_kws={'color':\"red\"}, scatter_kws={'edgecolor':\"white\"}, x_jitter=.9)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 20개로 그룹화하여 다시 상관관계 분석"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**수익률 상위로 정렬 , 당시 상장하지 않은 기업들과 PER이 지나치게 높은 아웃라이어들 제외** "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RETURN</th>\n",
       "      <th>PER</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NAME</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>랩지노믹스</th>\n",
       "      <td>1.0046</td>\n",
       "      <td>97.51720</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>씨젠</th>\n",
       "      <td>0.9255</td>\n",
       "      <td>35.56916</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>일양약품</th>\n",
       "      <td>0.1964</td>\n",
       "      <td>37.80371</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RFHIC</th>\n",
       "      <td>0.1885</td>\n",
       "      <td>35.53809</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>YBM넷</th>\n",
       "      <td>0.1146</td>\n",
       "      <td>48.99737</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>유비쿼스홀딩스</th>\n",
       "      <td>-0.6626</td>\n",
       "      <td>69.23803</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>보라티알</th>\n",
       "      <td>-0.6629</td>\n",
       "      <td>17.94025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>유에스티</th>\n",
       "      <td>-0.6646</td>\n",
       "      <td>35.51281</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>에스피시스템스</th>\n",
       "      <td>-0.6682</td>\n",
       "      <td>27.00530</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>엠투엔</th>\n",
       "      <td>-0.6958</td>\n",
       "      <td>16.26382</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1232 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         RETURN       PER\n",
       "NAME                     \n",
       "랩지노믹스    1.0046  97.51720\n",
       "씨젠       0.9255  35.56916\n",
       "일양약품     0.1964  37.80371\n",
       "RFHIC    0.1885  35.53809\n",
       "YBM넷     0.1146  48.99737\n",
       "...         ...       ...\n",
       "유비쿼스홀딩스 -0.6626  69.23803\n",
       "보라티알    -0.6629  17.94025\n",
       "유에스티    -0.6646  35.51281\n",
       "에스피시스템스 -0.6682  27.00530\n",
       "엠투엔     -0.6958  16.26382\n",
       "\n",
       "[1232 rows x 2 columns]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_0219 = df_0219.sort_values(by = ['RETURN'],axis=0,ascending = False)\n",
    "df_0219"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**스무개의 그룹으로 나눈다. 1232개의 종목들이므로 62개씩 19개의 포트폴리오 (마지막포트폴리오는 54개의 종목으로 구성된다)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_0219_1 = df_0219.iloc[:61,:]\n",
    "df_0219_2 = df_0219.iloc[62:123,:]\n",
    "df_0219_3 = df_0219.iloc[124:185,:]\n",
    "df_0219_4 = df_0219.iloc[186:247,:]\n",
    "df_0219_5 = df_0219.iloc[248:309,:]\n",
    "df_0219_6= df_0219.iloc[310:371,:]\n",
    "df_0219_7= df_0219.iloc[372:433,:]\n",
    "df_0219_8= df_0219.iloc[434:495,:]\n",
    "df_0219_9= df_0219.iloc[496:557,:]\n",
    "df_0219_10= df_0219.iloc[558:619,:]\n",
    "df_0219_11= df_0219.iloc[620:681,:]\n",
    "df_0219_12= df_0219.iloc[682:743,:]\n",
    "df_0219_13= df_0219.iloc[744:805,:]\n",
    "df_0219_14= df_0219.iloc[806:867,:]\n",
    "df_0219_15= df_0219.iloc[868:929,:]\n",
    "df_0219_16= df_0219.iloc[930:991,:]\n",
    "df_0219_17= df_0219.iloc[992:1053,:]\n",
    "df_0219_18= df_0219.iloc[1054:1115,:]\n",
    "df_0219_19= df_0219.iloc[1116:1177,:]\n",
    "df_0219_20= df_0219.iloc[1188:1231,:]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**나눈 20개의 그룹들의 평균수익률과 평균 PER을 구한다**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "df_group = (df_0219_1,df_0219_2,df_0219_3,df_0219_4,df_0219_5,df_0219_6,df_0219_7,df_0219_8,df_0219_9,df_0219_10,df_0219_11,df_0219_12,df_0219_13,df_0219_14,df_0219_15,df_0219_16,df_0219_17,df_0219_18,df_0219_19,df_0219_20)\n",
    "group_20=[]\n",
    "for df in df_group:\n",
    "    mean_df_0219 = df.mean()\n",
    "    data = [[mean_df_0219['RETURN'],mean_df_0219['PER']]]\n",
    "    df_group_done = pd.DataFrame(data,columns = ['RETURN','PER'])\n",
    "    group_20.append(df_group_done)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**나눈 그룹들을 다시 합쳐준다.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_0219_1 = group_20[0]\n",
    "df_0219_2 = group_20[1]\n",
    "df_0219_3 = group_20[2]\n",
    "df_0219_4 = group_20[3] \n",
    "df_0219_5 = group_20[4]\n",
    "df_0219_6= group_20[5]\n",
    "df_0219_7= group_20[6]\n",
    "df_0219_8= group_20[7]\n",
    "df_0219_9= group_20[8]\n",
    "df_0219_10= group_20[9]\n",
    "df_0219_11= group_20[10]\n",
    "df_0219_12= group_20[11]\n",
    "df_0219_13= group_20[12]\n",
    "df_0219_14= group_20[13]\n",
    "df_0219_15= group_20[14]\n",
    "df_0219_16= group_20[15]\n",
    "df_0219_17= group_20[16]\n",
    "df_0219_18= group_20[17]\n",
    "df_0219_19= group_20[18]\n",
    "df_0219_20= group_20[19]\n",
    "\n",
    "df_0219_20_GROUP = pd.concat([df_0219_1,df_0219_2,df_0219_3,df_0219_4,df_0219_5,df_0219_6,df_0219_7,df_0219_8,df_0219_9,df_0219_10,df_0219_11,df_0219_12,df_0219_13,df_0219_14,df_0219_15,df_0219_16,df_0219_17,df_0219_18,df_0219_19,df_0219_20],axis = 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**나눈 그룹들을 이제 하나의 DataFrame으로 통합시켜 회귀분석을 할 준비를 한다**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RETURN</th>\n",
       "      <th>PER</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.014103</td>\n",
       "      <td>23.390449</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.189257</td>\n",
       "      <td>12.352338</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.248343</td>\n",
       "      <td>16.469745</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.295215</td>\n",
       "      <td>16.047753</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.325820</td>\n",
       "      <td>16.163406</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.348854</td>\n",
       "      <td>14.215807</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.371289</td>\n",
       "      <td>17.730644</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.387915</td>\n",
       "      <td>15.561839</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.405166</td>\n",
       "      <td>17.099489</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.421648</td>\n",
       "      <td>20.530261</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.437511</td>\n",
       "      <td>16.050236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.451582</td>\n",
       "      <td>17.272776</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.467720</td>\n",
       "      <td>24.144762</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.480800</td>\n",
       "      <td>18.182130</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.496202</td>\n",
       "      <td>19.552902</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.513525</td>\n",
       "      <td>21.552620</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.530385</td>\n",
       "      <td>21.040425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.550672</td>\n",
       "      <td>25.655970</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.576869</td>\n",
       "      <td>26.497294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.624179</td>\n",
       "      <td>28.060661</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     RETURN        PER\n",
       "0 -0.014103  23.390449\n",
       "0 -0.189257  12.352338\n",
       "0 -0.248343  16.469745\n",
       "0 -0.295215  16.047753\n",
       "0 -0.325820  16.163406\n",
       "0 -0.348854  14.215807\n",
       "0 -0.371289  17.730644\n",
       "0 -0.387915  15.561839\n",
       "0 -0.405166  17.099489\n",
       "0 -0.421648  20.530261\n",
       "0 -0.437511  16.050236\n",
       "0 -0.451582  17.272776\n",
       "0 -0.467720  24.144762\n",
       "0 -0.480800  18.182130\n",
       "0 -0.496202  19.552902\n",
       "0 -0.513525  21.552620\n",
       "0 -0.530385  21.040425\n",
       "0 -0.550672  25.655970\n",
       "0 -0.576869  26.497294\n",
       "0 -0.624179  28.060661"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_0219_20_GROUP"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**나눈 20개의 그룹 회귀분석(독립변수:포트폴리오 평균 PER / 종속변수 : 포트폴리오 평균수익률)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>         <td>RETURN</td>      <th>  R-squared:         </th> <td>   0.251</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.209</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   6.027</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Sat, 28 Nov 2020</td> <th>  Prob (F-statistic):</th>  <td>0.0245</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>23:26:35</td>     <th>  Log-Likelihood:    </th> <td>  13.768</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>    20</td>      <th>  AIC:               </th> <td>  -23.54</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>    18</td>      <th>  BIC:               </th> <td>  -21.54</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th> <td>   -0.0849</td> <td>    0.134</td> <td>   -0.632</td> <td> 0.535</td> <td>   -0.367</td> <td>    0.197</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>PER</th>       <td>   -0.0166</td> <td>    0.007</td> <td>   -2.455</td> <td> 0.024</td> <td>   -0.031</td> <td>   -0.002</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>32.225</td> <th>  Durbin-Watson:     </th> <td>   0.597</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td>  68.246</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 2.642</td> <th>  Prob(JB):          </th> <td>1.52e-15</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td>10.346</td> <th>  Cond. No.          </th> <td>    93.2</td>\n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                 RETURN   R-squared:                       0.251\n",
       "Model:                            OLS   Adj. R-squared:                  0.209\n",
       "Method:                 Least Squares   F-statistic:                     6.027\n",
       "Date:                Sat, 28 Nov 2020   Prob (F-statistic):             0.0245\n",
       "Time:                        23:26:35   Log-Likelihood:                 13.768\n",
       "No. Observations:                  20   AIC:                            -23.54\n",
       "Df Residuals:                      18   BIC:                            -21.54\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "Intercept     -0.0849      0.134     -0.632      0.535      -0.367       0.197\n",
       "PER           -0.0166      0.007     -2.455      0.024      -0.031      -0.002\n",
       "==============================================================================\n",
       "Omnibus:                       32.225   Durbin-Watson:                   0.597\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               68.246\n",
       "Skew:                           2.642   Prob(JB):                     1.52e-15\n",
       "Kurtosis:                      10.346   Cond. No.                         93.2\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg = sm.OLS.from_formula(\"RETURN ~ PER\", df_0219_20_GROUP).fit()\n",
    "reg.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**회귀분석 그래프 그리기 (WITH. seaborn)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x205aa423550>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.lmplot(x=\"PER\", y=\"RETURN\", data=df_0219_20_GROUP,robust = True,line_kws={'color':\"red\"}, scatter_kws={'edgecolor':\"white\"}, x_jitter=.9)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### **1.2 급락기에 외국인이 많이 산 종목을 팔아야 하는가?**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**엑셀파일 불러오기**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_fn_0219 = pd.read_excel('C:/Users/pc/Desktop/PHW1129_DY.xlsx',\n",
    "                    sheet_name = '0219_RET_ABR',\n",
    "                    header = 1,\n",
    "                    index_col = 'NAME')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RETURN</th>\n",
       "      <th>NET_SELL</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NAME</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>삼성전자</th>\n",
       "      <td>-0.2865</td>\n",
       "      <td>1320.452220</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SK하이닉스</th>\n",
       "      <td>-0.3333</td>\n",
       "      <td>535.791663</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LG화학</th>\n",
       "      <td>-0.4307</td>\n",
       "      <td>187.783506</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>삼성바이오로직스</th>\n",
       "      <td>-0.2752</td>\n",
       "      <td>57.927678</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NAVER</th>\n",
       "      <td>-0.2401</td>\n",
       "      <td>128.413675</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>지엘팜텍</th>\n",
       "      <td>-0.5451</td>\n",
       "      <td>0.227701</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>신원종합개발</th>\n",
       "      <td>-0.4342</td>\n",
       "      <td>0.035697</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>지란지교시큐리티</th>\n",
       "      <td>-0.4080</td>\n",
       "      <td>0.065622</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>코스나인</th>\n",
       "      <td>-0.4428</td>\n",
       "      <td>0.284503</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>YW</th>\n",
       "      <td>-0.3179</td>\n",
       "      <td>0.019298</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2000 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          RETURN     NET_SELL\n",
       "NAME                         \n",
       "삼성전자     -0.2865  1320.452220\n",
       "SK하이닉스   -0.3333   535.791663\n",
       "LG화학     -0.4307   187.783506\n",
       "삼성바이오로직스 -0.2752    57.927678\n",
       "NAVER    -0.2401   128.413675\n",
       "...          ...          ...\n",
       "지엘팜텍     -0.5451     0.227701\n",
       "신원종합개발   -0.4342     0.035697\n",
       "지란지교시큐리티 -0.4080     0.065622\n",
       "코스나인     -0.4428     0.284503\n",
       "YW       -0.3179     0.019298\n",
       "\n",
       "[2000 rows x 2 columns]"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_fn_0219"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**한달동안 순매도대금이 400000000(40억원)이상인 몇안되는 아웃라이더 들은 제외하기로 하였다.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "adj=df_fn_0219['NET_SELL']<400"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_fn_0219 = df_fn_0219[adj]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**회귀분석 (독립변수: 급락기간 외인 매도액 / 종속변수: 급락기간 수익률)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>         <td>RETURN</td>      <th>  R-squared:         </th> <td>   0.004</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.003</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   7.108</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Sat, 28 Nov 2020</td> <th>  Prob (F-statistic):</th>  <td>0.00774</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>23:33:59</td>     <th>  Log-Likelihood:    </th> <td>  535.85</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>  1998</td>      <th>  AIC:               </th> <td>  -1068.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>  1996</td>      <th>  BIC:               </th> <td>  -1056.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th> <td>   -0.3929</td> <td>    0.004</td> <td>  -91.668</td> <td> 0.000</td> <td>   -0.401</td> <td>   -0.385</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>NET_SELL</th>  <td>    0.0010</td> <td>    0.000</td> <td>    2.666</td> <td> 0.008</td> <td>    0.000</td> <td>    0.002</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>1031.194</td> <th>  Durbin-Watson:     </th> <td>   1.972</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th>  <td> 0.000</td>  <th>  Jarque-Bera (JB):  </th> <td>11196.352</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>           <td> 2.183</td>  <th>  Prob(JB):          </th> <td>    0.00</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>       <td>13.744</td>  <th>  Cond. No.          </th> <td>    11.8</td> \n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                 RETURN   R-squared:                       0.004\n",
       "Model:                            OLS   Adj. R-squared:                  0.003\n",
       "Method:                 Least Squares   F-statistic:                     7.108\n",
       "Date:                Sat, 28 Nov 2020   Prob (F-statistic):            0.00774\n",
       "Time:                        23:33:59   Log-Likelihood:                 535.85\n",
       "No. Observations:                1998   AIC:                            -1068.\n",
       "Df Residuals:                    1996   BIC:                            -1056.\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "Intercept     -0.3929      0.004    -91.668      0.000      -0.401      -0.385\n",
       "NET_SELL       0.0010      0.000      2.666      0.008       0.000       0.002\n",
       "==============================================================================\n",
       "Omnibus:                     1031.194   Durbin-Watson:                   1.972\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):            11196.352\n",
       "Skew:                           2.183   Prob(JB):                         0.00\n",
       "Kurtosis:                      13.744   Cond. No.                         11.8\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg = sm.OLS.from_formula(\"RETURN ~ NET_SELL\", df_fn_0219).fit()\n",
    "reg.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**회귀분석 그래프 그리기(with.seaborn)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x205a73a0eb0>"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.lmplot(x=\"NET_SELL\", y=\"RETURN\", data=df_fn_0219,robust = True,line_kws={'color':\"red\"}, scatter_kws={'edgecolor':\"white\"}, x_jitter=.9)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### **20개로 그룹화하여 다시 상관관계분석**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**수익률로 정렬**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RETURN</th>\n",
       "      <th>NET_SELL</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NAME</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>수젠텍</th>\n",
       "      <td>1.4925</td>\n",
       "      <td>1.320490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>랩지노믹스</th>\n",
       "      <td>1.0046</td>\n",
       "      <td>5.558530</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>씨젠</th>\n",
       "      <td>0.9255</td>\n",
       "      <td>48.906664</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>진원생명과학</th>\n",
       "      <td>0.8835</td>\n",
       "      <td>5.014958</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>엑세스바이오</th>\n",
       "      <td>0.6623</td>\n",
       "      <td>4.832893</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>엠투엔</th>\n",
       "      <td>-0.6958</td>\n",
       "      <td>1.210341</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>유양디앤유</th>\n",
       "      <td>-0.6965</td>\n",
       "      <td>3.856809</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>아나패스</th>\n",
       "      <td>-0.7054</td>\n",
       "      <td>1.948973</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>이노와이즈</th>\n",
       "      <td>-0.7526</td>\n",
       "      <td>3.026609</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>세미콘라이트</th>\n",
       "      <td>-0.7688</td>\n",
       "      <td>0.283421</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1998 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        RETURN   NET_SELL\n",
       "NAME                     \n",
       "수젠텍     1.4925   1.320490\n",
       "랩지노믹스   1.0046   5.558530\n",
       "씨젠      0.9255  48.906664\n",
       "진원생명과학  0.8835   5.014958\n",
       "엑세스바이오  0.6623   4.832893\n",
       "...        ...        ...\n",
       "엠투엔    -0.6958   1.210341\n",
       "유양디앤유  -0.6965   3.856809\n",
       "아나패스   -0.7054   1.948973\n",
       "이노와이즈  -0.7526   3.026609\n",
       "세미콘라이트 -0.7688   0.283421\n",
       "\n",
       "[1998 rows x 2 columns]"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_fn_0219 = df_fn_0219.sort_values(by = ['RETURN'],axis=0,ascending = False)\n",
    "df_fn_0219"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**20개의 그룹으로 나누기 1998개별종목이므로 100개종목씩 포트폴리오를 구성하고 마지막 포트폴리오는 98개의 종목으로 한다.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_fn_0219_1 = df_fn_0219.iloc[:99,:]\n",
    "df_fn_0219_2 = df_fn_0219.iloc[100:199,:]\n",
    "df_fn_0219_3 = df_fn_0219.iloc[200:299,:]\n",
    "df_fn_0219_4 = df_fn_0219.iloc[300:399,:]\n",
    "df_fn_0219_5 = df_fn_0219.iloc[400:499,:]\n",
    "df_fn_0219_6= df_fn_0219.iloc[500:599,:]\n",
    "df_fn_0219_7= df_fn_0219.iloc[600:699,:]\n",
    "df_fn_0219_8= df_fn_0219.iloc[700:799,:]\n",
    "df_fn_0219_9= df_fn_0219.iloc[800:899,:]\n",
    "df_fn_0219_10= df_fn_0219.iloc[900:999,:]\n",
    "df_fn_0219_11= df_fn_0219.iloc[1000:1099,:]\n",
    "df_fn_0219_12= df_fn_0219.iloc[1100:1199,:]\n",
    "df_fn_0219_13= df_fn_0219.iloc[1200:1299,:]\n",
    "df_fn_0219_14= df_fn_0219.iloc[1300:1399,:]\n",
    "df_fn_0219_15= df_fn_0219.iloc[1400:1499,:]\n",
    "df_fn_0219_16= df_fn_0219.iloc[1500:1599,:]\n",
    "df_fn_0219_17= df_fn_0219.iloc[1600:1699,:]\n",
    "df_fn_0219_18= df_fn_0219.iloc[1700:1799,:]\n",
    "df_fn_0219_19= df_fn_0219.iloc[1800:1899,:]\n",
    "df_fn_0219_20= df_fn_0219.iloc[1900:1997,:]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**나눈 20개의 포트폴리오의 평균 수익률과 평균 외인매도액을 계산**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_group = (df_fn_0219_1,df_fn_0219_2,df_fn_0219_3,df_fn_0219_4,df_fn_0219_5,df_fn_0219_6,df_fn_0219_7,df_fn_0219_8,df_fn_0219_9,df_fn_0219_10,df_fn_0219_11,df_fn_0219_12,df_fn_0219_13,df_fn_0219_14,df_fn_0219_15,df_fn_0219_16,df_fn_0219_17,df_fn_0219_18,df_fn_0219_19,df_fn_0219_20)\n",
    "group_fn_20=[]\n",
    "for df in df_group:\n",
    "    mean_df_fn_0219 = df.mean()\n",
    "    data = [[mean_df_fn_0219['RETURN'],mean_df_fn_0219['NET_SELL']]]\n",
    "    df_group_done = pd.DataFrame(data,columns = ['RETURN','NET_SELL'])\n",
    "    group_fn_20.append(df_group_done)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**나눈 그룹들을 다시 합쳐준다**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_fn_0219_1 = group_fn_20[0]\n",
    "df_fn_0219_2 = group_fn_20[1]\n",
    "df_fn_0219_3 = group_fn_20[2]\n",
    "df_fn_0219_4 = group_fn_20[3] \n",
    "df_fn_0219_5 = group_fn_20[4]\n",
    "df_fn_0219_6= group_fn_20[5]\n",
    "df_fn_0219_7= group_fn_20[6]\n",
    "df_fn_0219_8= group_fn_20[7]\n",
    "df_fn_0219_9= group_fn_20[8]\n",
    "df_fn_0219_10= group_fn_20[9]\n",
    "df_fn_0219_11= group_fn_20[10]\n",
    "df_fn_0219_12= group_fn_20[11]\n",
    "df_fn_0219_13= group_fn_20[12]\n",
    "df_fn_0219_14= group_fn_20[13]\n",
    "df_fn_0219_15= group_fn_20[14]\n",
    "df_fn_0219_16= group_fn_20[15]\n",
    "df_fn_0219_17= group_fn_20[16]\n",
    "df_fn_0219_18= group_fn_20[17]\n",
    "df_fn_0219_19= group_fn_20[18]\n",
    "df_fn_0219_20= group_fn_20[19]\n",
    "\n",
    "df_fn_0219_20_GROUP = pd.concat([df_fn_0219_1,df_fn_0219_2,df_fn_0219_3,df_fn_0219_4,df_fn_0219_5,df_fn_0219_6,df_fn_0219_7,df_fn_0219_8,df_fn_0219_9,df_fn_0219_10,df_fn_0219_11,df_fn_0219_12,df_fn_0219_13,df_fn_0219_14,df_fn_0219_15,df_fn_0219_16,df_fn_0219_17,df_fn_0219_18,df_fn_0219_19,df_fn_0219_20],axis = 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**나눈 그룹들을 이제 하나의 DataFrame으로 통합시켜 회귀분석을 할 준비를 한다**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RETURN</th>\n",
       "      <th>NET_SELL</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.109197</td>\n",
       "      <td>2.075614</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.065135</td>\n",
       "      <td>3.546387</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.193093</td>\n",
       "      <td>4.200664</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.253523</td>\n",
       "      <td>5.505505</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.302626</td>\n",
       "      <td>3.399939</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.334449</td>\n",
       "      <td>2.574349</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.361968</td>\n",
       "      <td>4.532613</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.384899</td>\n",
       "      <td>3.836602</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.404644</td>\n",
       "      <td>2.452658</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.423178</td>\n",
       "      <td>3.858084</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.439638</td>\n",
       "      <td>3.335195</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.456585</td>\n",
       "      <td>4.588738</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.473416</td>\n",
       "      <td>1.367051</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.487952</td>\n",
       "      <td>1.899235</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.503815</td>\n",
       "      <td>3.096205</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.520629</td>\n",
       "      <td>1.645865</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.536137</td>\n",
       "      <td>1.076644</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.555386</td>\n",
       "      <td>1.240682</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.582151</td>\n",
       "      <td>2.202082</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.629007</td>\n",
       "      <td>1.487687</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     RETURN  NET_SELL\n",
       "0  0.109197  2.075614\n",
       "0 -0.065135  3.546387\n",
       "0 -0.193093  4.200664\n",
       "0 -0.253523  5.505505\n",
       "0 -0.302626  3.399939\n",
       "0 -0.334449  2.574349\n",
       "0 -0.361968  4.532613\n",
       "0 -0.384899  3.836602\n",
       "0 -0.404644  2.452658\n",
       "0 -0.423178  3.858084\n",
       "0 -0.439638  3.335195\n",
       "0 -0.456585  4.588738\n",
       "0 -0.473416  1.367051\n",
       "0 -0.487952  1.899235\n",
       "0 -0.503815  3.096205\n",
       "0 -0.520629  1.645865\n",
       "0 -0.536137  1.076644\n",
       "0 -0.555386  1.240682\n",
       "0 -0.582151  2.202082\n",
       "0 -0.629007  1.487687"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_fn_0219_20_GROUP"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**회귀분석 시행 (독립변수: 포트폴리오 외인 순매도 / 종속변수: 포트폴리오 평균 수익률)** "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>         <td>RETURN</td>      <th>  R-squared:         </th> <td>   0.151</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.103</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   3.190</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Sat, 28 Nov 2020</td> <th>  Prob (F-statistic):</th>  <td>0.0910</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>23:53:28</td>     <th>  Log-Likelihood:    </th> <td>  7.9710</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>    20</td>      <th>  AIC:               </th> <td>  -11.94</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>    18</td>      <th>  BIC:               </th> <td>  -9.951</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th> <td>   -0.5486</td> <td>    0.097</td> <td>   -5.671</td> <td> 0.000</td> <td>   -0.752</td> <td>   -0.345</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>NET_SELL</th>  <td>    0.0548</td> <td>    0.031</td> <td>    1.786</td> <td> 0.091</td> <td>   -0.010</td> <td>    0.119</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>21.420</td> <th>  Durbin-Watson:     </th> <td>   0.374</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td>  26.599</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 2.003</td> <th>  Prob(JB):          </th> <td>1.68e-06</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 6.983</td> <th>  Cond. No.          </th> <td>    8.65</td>\n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                 RETURN   R-squared:                       0.151\n",
       "Model:                            OLS   Adj. R-squared:                  0.103\n",
       "Method:                 Least Squares   F-statistic:                     3.190\n",
       "Date:                Sat, 28 Nov 2020   Prob (F-statistic):             0.0910\n",
       "Time:                        23:53:28   Log-Likelihood:                 7.9710\n",
       "No. Observations:                  20   AIC:                            -11.94\n",
       "Df Residuals:                      18   BIC:                            -9.951\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "Intercept     -0.5486      0.097     -5.671      0.000      -0.752      -0.345\n",
       "NET_SELL       0.0548      0.031      1.786      0.091      -0.010       0.119\n",
       "==============================================================================\n",
       "Omnibus:                       21.420   Durbin-Watson:                   0.374\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               26.599\n",
       "Skew:                           2.003   Prob(JB):                     1.68e-06\n",
       "Kurtosis:                       6.983   Cond. No.                         8.65\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg = sm.OLS.from_formula(\"RETURN ~ NET_SELL\", df_fn_0219_20_GROUP).fit()\n",
    "reg.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**회귀분석 그래프 그리기(with.seaborn)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x205a743af70>"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.lmplot(x=\"NET_SELL\", y=\"RETURN\", data=df_fn_0219_20_GROUP,robust = True,line_kws={'color':\"red\"}, scatter_kws={'edgecolor':\"white\"}, x_jitter=.9)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###   **2.1 회복기에 저평가된 주식을 사야하나?(03/19-06/19)**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**엑셀파일 불러오기**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_0319 = pd.read_excel('C:/Users/pc/Desktop/PHW1129_DY.xlsx',\n",
    "                    sheet_name = '0319_RET_PER',\n",
    "                    header = 1,\n",
    "                    index_col = 'NAME')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RETURN</th>\n",
       "      <th>PER</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NAME</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>삼성전자</th>\n",
       "      <td>0.2317</td>\n",
       "      <td>14.01526</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SK하이닉스</th>\n",
       "      <td>0.2377</td>\n",
       "      <td>28.30060</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LG화학</th>\n",
       "      <td>1.2261</td>\n",
       "      <td>70.64551</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>삼성바이오로직스</th>\n",
       "      <td>1.1885</td>\n",
       "      <td>157.17528</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NAVER</th>\n",
       "      <td>0.7326</td>\n",
       "      <td>42.43296</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>지엘팜텍</th>\n",
       "      <td>1.2737</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>신원종합개발</th>\n",
       "      <td>0.4700</td>\n",
       "      <td>1.83111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>지란지교시큐리티</th>\n",
       "      <td>0.5042</td>\n",
       "      <td>12.22807</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>코스나인</th>\n",
       "      <td>0.1667</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>YW</th>\n",
       "      <td>0.4192</td>\n",
       "      <td>14.86307</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2000 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          RETURN        PER\n",
       "NAME                       \n",
       "삼성전자      0.2317   14.01526\n",
       "SK하이닉스    0.2377   28.30060\n",
       "LG화학      1.2261   70.64551\n",
       "삼성바이오로직스  1.1885  157.17528\n",
       "NAVER     0.7326   42.43296\n",
       "...          ...        ...\n",
       "지엘팜텍      1.2737        NaN\n",
       "신원종합개발    0.4700    1.83111\n",
       "지란지교시큐리티  0.5042   12.22807\n",
       "코스나인      0.1667        NaN\n",
       "YW        0.4192   14.86307\n",
       "\n",
       "[2000 rows x 2 columns]"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_0319"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**PER 200이상의 아웃라이더들은 제외한다**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "adj=df_0319['PER']<200"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_0319 = df_0319[adj]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**회귀분석 실시(독립변수: 회복분기 개별PER /종속변수: 회복기간의 개별수익률)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>         <td>RETURN</td>      <th>  R-squared:         </th> <td>   0.012</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.011</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   15.62</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Sat, 28 Nov 2020</td> <th>  Prob (F-statistic):</th> <td>8.16e-05</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>23:27:01</td>     <th>  Log-Likelihood:    </th> <td> -1052.1</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>  1292</td>      <th>  AIC:               </th> <td>   2108.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>  1290</td>      <th>  BIC:               </th> <td>   2118.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th> <td>    0.7145</td> <td>    0.019</td> <td>   37.471</td> <td> 0.000</td> <td>    0.677</td> <td>    0.752</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>PER</th>       <td>    0.0021</td> <td>    0.001</td> <td>    3.952</td> <td> 0.000</td> <td>    0.001</td> <td>    0.003</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>834.274</td> <th>  Durbin-Watson:     </th> <td>   2.039</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td>  <th>  Jarque-Bera (JB):  </th> <td>15112.818</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 2.697</td>  <th>  Prob(JB):          </th> <td>    0.00</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td>18.863</td>  <th>  Cond. No.          </th> <td>    44.6</td> \n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                 RETURN   R-squared:                       0.012\n",
       "Model:                            OLS   Adj. R-squared:                  0.011\n",
       "Method:                 Least Squares   F-statistic:                     15.62\n",
       "Date:                Sat, 28 Nov 2020   Prob (F-statistic):           8.16e-05\n",
       "Time:                        23:27:01   Log-Likelihood:                -1052.1\n",
       "No. Observations:                1292   AIC:                             2108.\n",
       "Df Residuals:                    1290   BIC:                             2118.\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "Intercept      0.7145      0.019     37.471      0.000       0.677       0.752\n",
       "PER            0.0021      0.001      3.952      0.000       0.001       0.003\n",
       "==============================================================================\n",
       "Omnibus:                      834.274   Durbin-Watson:                   2.039\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):            15112.818\n",
       "Skew:                           2.697   Prob(JB):                         0.00\n",
       "Kurtosis:                      18.863   Cond. No.                         44.6\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg = sm.OLS.from_formula(\"RETURN ~ PER\", df_0319).fit()\n",
    "reg.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**회귀분석그래프(with.seaborn)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x205aa407f40>"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.lmplot(x=\"PER\", y=\"RETURN\", data=df_0219,robust = True,line_kws={'color':\"red\"}, scatter_kws={'edgecolor':\"white\"}, x_jitter=.9)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 20개로 그룹화하여 다시 상관관계분석"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**수익률 상위로 정렬 , 당시 상장하지 않은 기업들과 PER이 200이상인 아웃라이어들 제외** "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RETURN</th>\n",
       "      <th>PER</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NAME</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>에프에스티</th>\n",
       "      <td>5.8077</td>\n",
       "      <td>6.28661</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>빅텍</th>\n",
       "      <td>5.7930</td>\n",
       "      <td>28.61623</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>스페코</th>\n",
       "      <td>4.5407</td>\n",
       "      <td>3.75214</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>두산퓨얼셀</th>\n",
       "      <td>4.4904</td>\n",
       "      <td>24.31299</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>대웅</th>\n",
       "      <td>3.7840</td>\n",
       "      <td>7.74620</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>신세계인터내셔날</th>\n",
       "      <td>-0.1285</td>\n",
       "      <td>18.09660</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>우신시스템</th>\n",
       "      <td>-0.1295</td>\n",
       "      <td>10.50360</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>대유에이피</th>\n",
       "      <td>-0.1362</td>\n",
       "      <td>10.46313</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>메디톡스</th>\n",
       "      <td>-0.1772</td>\n",
       "      <td>40.77895</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>엠벤처투자</th>\n",
       "      <td>-0.3634</td>\n",
       "      <td>8.69891</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1292 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          RETURN       PER\n",
       "NAME                      \n",
       "에프에스티     5.8077   6.28661\n",
       "빅텍        5.7930  28.61623\n",
       "스페코       4.5407   3.75214\n",
       "두산퓨얼셀     4.4904  24.31299\n",
       "대웅        3.7840   7.74620\n",
       "...          ...       ...\n",
       "신세계인터내셔날 -0.1285  18.09660\n",
       "우신시스템    -0.1295  10.50360\n",
       "대유에이피    -0.1362  10.46313\n",
       "메디톡스     -0.1772  40.77895\n",
       "엠벤처투자    -0.3634   8.69891\n",
       "\n",
       "[1292 rows x 2 columns]"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_0319 = df_0319.sort_values(by = ['RETURN'],axis=0,ascending = False)\n",
    "df_0319"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**스무개의 그룹으로 나눈다 1292개의 개별종목이므로 65개씩 포트폴리오 구성 마지막은 64개의 종목**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_0319_1 = df_0319.iloc[:64,:]\n",
    "df_0319_2 = df_0319.iloc[65:129,:]\n",
    "df_0319_3 = df_0319.iloc[130:194,:]\n",
    "df_0319_4 = df_0319.iloc[195:259,:]\n",
    "df_0319_5 = df_0319.iloc[260:324,:]\n",
    "df_0319_6= df_0319.iloc[325:389,:]\n",
    "df_0319_7= df_0319.iloc[390:454,:]\n",
    "df_0319_8= df_0319.iloc[455:519,:]\n",
    "df_0319_9= df_0319.iloc[520:584,:]\n",
    "df_0319_10= df_0319.iloc[585:649,:]\n",
    "df_0319_11= df_0319.iloc[650:714,:]\n",
    "df_0319_12= df_0319.iloc[715:779,:]\n",
    "df_0319_13= df_0319.iloc[780:844,:]\n",
    "df_0319_14= df_0319.iloc[845:909,:]\n",
    "df_0319_15= df_0319.iloc[910:974,:]\n",
    "df_0319_16= df_0319.iloc[975:1039,:]\n",
    "df_0319_17= df_0319.iloc[1040:1104,:]\n",
    "df_0319_18= df_0319.iloc[1105:1169,:]\n",
    "df_0319_19= df_0319.iloc[1170:1234,:]\n",
    "df_0319_20= df_0319.iloc[1235:1299,:]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**나눈 20개의 포트폴리오의 평균 수익률과  포트폴리오별 평균 PER을 계산한다.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_group = (df_0319_1,df_0319_2,df_0319_3,df_0319_4,df_0319_5,df_0319_6,df_0319_7,df_0319_8,df_0319_9,df_0319_10,df_0319_11,df_0319_12,df_0319_13,df_0319_14,df_0319_15,df_0319_16,df_0319_17,df_0319_18,df_0319_19,df_0319_20)\n",
    "group_20=[]\n",
    "for df in df_group:\n",
    "    mean_df_0319 = df.mean()\n",
    "    data = [[mean_df_0319['RETURN'],mean_df_0319['PER']]]\n",
    "    df_group_done = pd.DataFrame(data,columns = ['RETURN','PER'])\n",
    "    group_20.append(df_group_done)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**나눈 그룹들을 다시 합쳐준다.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_0319_1 = group_20[0]\n",
    "df_0319_2 = group_20[1]\n",
    "df_0319_3 = group_20[2]\n",
    "df_0319_4 = group_20[3] \n",
    "df_0319_5 = group_20[4]\n",
    "df_0319_6= group_20[5]\n",
    "df_0319_7= group_20[6]\n",
    "df_0319_8= group_20[7]\n",
    "df_0319_9= group_20[8]\n",
    "df_0319_10= group_20[9]\n",
    "df_0319_11= group_20[10]\n",
    "df_0319_12= group_20[11]\n",
    "df_0319_13= group_20[12]\n",
    "df_0319_14= group_20[13]\n",
    "df_0319_15= group_20[14]\n",
    "df_0319_16= group_20[15]\n",
    "df_0319_17= group_20[16]\n",
    "df_0319_18= group_20[17]\n",
    "df_0319_19= group_20[18]\n",
    "df_0319_20= group_20[19]\n",
    "\n",
    "df_0319_20_GROUP = pd.concat([df_0319_1,df_0319_2,df_0319_3,df_0319_4,df_0319_5,df_0319_6,df_0319_7,df_0319_8,df_0319_9,df_0319_10,df_0319_11,df_0319_12,df_0319_13,df_0319_14,df_0319_15,df_0319_16,df_0319_17,df_0319_18,df_0319_19,df_0319_20],axis = 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**나눈 그룹들을 이제 하나의 DataFrame으로 통합시켜 회귀분석을 할 준비를 한다**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RETURN</th>\n",
       "      <th>PER</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.361305</td>\n",
       "      <td>28.635534</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.551120</td>\n",
       "      <td>25.769449</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.265877</td>\n",
       "      <td>30.898268</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.118427</td>\n",
       "      <td>32.059994</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.010258</td>\n",
       "      <td>21.467184</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.921642</td>\n",
       "      <td>19.706986</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.852528</td>\n",
       "      <td>22.226024</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.777670</td>\n",
       "      <td>22.024725</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.724123</td>\n",
       "      <td>19.429022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.673130</td>\n",
       "      <td>19.378579</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.623942</td>\n",
       "      <td>19.812038</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.576989</td>\n",
       "      <td>17.758659</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.527053</td>\n",
       "      <td>23.250340</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.483180</td>\n",
       "      <td>14.015471</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.439334</td>\n",
       "      <td>23.275968</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.395950</td>\n",
       "      <td>19.233342</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.340895</td>\n",
       "      <td>16.978612</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.277942</td>\n",
       "      <td>14.693838</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.182720</td>\n",
       "      <td>17.902513</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.027112</td>\n",
       "      <td>18.479088</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     RETURN        PER\n",
       "0  2.361305  28.635534\n",
       "0  1.551120  25.769449\n",
       "0  1.265877  30.898268\n",
       "0  1.118427  32.059994\n",
       "0  1.010258  21.467184\n",
       "0  0.921642  19.706986\n",
       "0  0.852528  22.226024\n",
       "0  0.777670  22.024725\n",
       "0  0.724123  19.429022\n",
       "0  0.673130  19.378579\n",
       "0  0.623942  19.812038\n",
       "0  0.576989  17.758659\n",
       "0  0.527053  23.250340\n",
       "0  0.483180  14.015471\n",
       "0  0.439334  23.275968\n",
       "0  0.395950  19.233342\n",
       "0  0.340895  16.978612\n",
       "0  0.277942  14.693838\n",
       "0  0.182720  17.902513\n",
       "0  0.027112  18.479088"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_0319_20_GROUP"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**회귀분석 시행 (독립변수: 회복기간 포트폴리오 PER / 종속변수: 회복기간 포트폴리오별 평균 수익률)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>         <td>RETURN</td>      <th>  R-squared:         </th> <td>   0.521</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.494</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   19.56</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Sat, 28 Nov 2020</td> <th>  Prob (F-statistic):</th> <td>0.000329</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>23:27:47</td>     <th>  Log-Likelihood:    </th> <td> -7.8882</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>    20</td>      <th>  AIC:               </th> <td>   19.78</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>    18</td>      <th>  BIC:               </th> <td>   21.77</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th> <td>   -0.9194</td> <td>    0.388</td> <td>   -2.368</td> <td> 0.029</td> <td>   -1.735</td> <td>   -0.104</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>PER</th>       <td>    0.0785</td> <td>    0.018</td> <td>    4.422</td> <td> 0.000</td> <td>    0.041</td> <td>    0.116</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 6.322</td> <th>  Durbin-Watson:     </th> <td>   1.192</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.042</td> <th>  Jarque-Bera (JB):  </th> <td>   3.817</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.884</td> <th>  Prob(JB):          </th> <td>   0.148</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 4.206</td> <th>  Cond. No.          </th> <td>    101.</td>\n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                 RETURN   R-squared:                       0.521\n",
       "Model:                            OLS   Adj. R-squared:                  0.494\n",
       "Method:                 Least Squares   F-statistic:                     19.56\n",
       "Date:                Sat, 28 Nov 2020   Prob (F-statistic):           0.000329\n",
       "Time:                        23:27:47   Log-Likelihood:                -7.8882\n",
       "No. Observations:                  20   AIC:                             19.78\n",
       "Df Residuals:                      18   BIC:                             21.77\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "Intercept     -0.9194      0.388     -2.368      0.029      -1.735      -0.104\n",
       "PER            0.0785      0.018      4.422      0.000       0.041       0.116\n",
       "==============================================================================\n",
       "Omnibus:                        6.322   Durbin-Watson:                   1.192\n",
       "Prob(Omnibus):                  0.042   Jarque-Bera (JB):                3.817\n",
       "Skew:                           0.884   Prob(JB):                        0.148\n",
       "Kurtosis:                       4.206   Cond. No.                         101.\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg = sm.OLS.from_formula(\"RETURN ~ PER\", df_0319_20_GROUP).fit()\n",
    "reg.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**회귀분석 그래프 그리기(with.seabon)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x205a7637c40>"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.lmplot(x=\"PER\", y=\"RETURN\", data=df_0319_20_GROUP,robust = True,line_kws={'color':\"red\"}, scatter_kws={'edgecolor':\"white\"}, x_jitter=.9)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### **2.2 회복기에 외국인이 많이 산 종목을 사야 하는가?**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**엑셀파일 불러오기**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_fn_0319 = pd.read_excel('C:/Users/pc/Desktop/PHW1129_DY.xlsx',\n",
    "                    sheet_name = '0319_RET_ABR',\n",
    "                    header = 1,\n",
    "                    index_col = 'NAME')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RETURN</th>\n",
       "      <th>NET_BUY</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NAME</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>삼성전자</th>\n",
       "      <td>0.2317</td>\n",
       "      <td>1786.984216</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SK하이닉스</th>\n",
       "      <td>0.2377</td>\n",
       "      <td>603.515302</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LG화학</th>\n",
       "      <td>1.2261</td>\n",
       "      <td>317.494913</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>삼성바이오로직스</th>\n",
       "      <td>1.1885</td>\n",
       "      <td>221.842309</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NAVER</th>\n",
       "      <td>0.7326</td>\n",
       "      <td>411.802798</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>지엘팜텍</th>\n",
       "      <td>1.2737</td>\n",
       "      <td>0.940878</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>신원종합개발</th>\n",
       "      <td>0.4700</td>\n",
       "      <td>0.123332</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>지란지교시큐리티</th>\n",
       "      <td>0.5042</td>\n",
       "      <td>0.495451</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>코스나인</th>\n",
       "      <td>0.1667</td>\n",
       "      <td>0.303819</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>YW</th>\n",
       "      <td>0.4192</td>\n",
       "      <td>0.028584</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2000 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          RETURN      NET_BUY\n",
       "NAME                         \n",
       "삼성전자      0.2317  1786.984216\n",
       "SK하이닉스    0.2377   603.515302\n",
       "LG화학      1.2261   317.494913\n",
       "삼성바이오로직스  1.1885   221.842309\n",
       "NAVER     0.7326   411.802798\n",
       "...          ...          ...\n",
       "지엘팜텍      1.2737     0.940878\n",
       "신원종합개발    0.4700     0.123332\n",
       "지란지교시큐리티  0.5042     0.495451\n",
       "코스나인      0.1667     0.303819\n",
       "YW        0.4192     0.028584\n",
       "\n",
       "[2000 rows x 2 columns]"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_fn_0319"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**외인 순매수가 350000000(35억원) 이상인 아웃라이더들은 제외**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "adj = df_fn_0319['NET_BUY']<350"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_fn_0319 = df_fn_0319[adj]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**회귀분석을 시행 (독립변수: 회복기 기업별 외인순매수 / 종속변수: 회복기 기업별 수익률)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>         <td>RETURN</td>      <th>  R-squared:         </th> <td>   0.002</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.001</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   3.041</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Sun, 29 Nov 2020</td> <th>  Prob (F-statistic):</th>  <td>0.0813</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>00:03:30</td>     <th>  Log-Likelihood:    </th> <td> -1796.9</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>  1996</td>      <th>  AIC:               </th> <td>   3598.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>  1994</td>      <th>  BIC:               </th> <td>   3609.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th> <td>    0.7496</td> <td>    0.014</td> <td>   53.468</td> <td> 0.000</td> <td>    0.722</td> <td>    0.777</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>NET_BUY</th>   <td>    0.0012</td> <td>    0.001</td> <td>    1.744</td> <td> 0.081</td> <td>   -0.000</td> <td>    0.002</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>1102.372</td> <th>  Durbin-Watson:     </th> <td>   1.869</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th>  <td> 0.000</td>  <th>  Jarque-Bera (JB):  </th> <td>13345.109</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>           <td> 2.347</td>  <th>  Prob(JB):          </th> <td>    0.00</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>       <td>14.765</td>  <th>  Cond. No.          </th> <td>    22.1</td> \n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                 RETURN   R-squared:                       0.002\n",
       "Model:                            OLS   Adj. R-squared:                  0.001\n",
       "Method:                 Least Squares   F-statistic:                     3.041\n",
       "Date:                Sun, 29 Nov 2020   Prob (F-statistic):             0.0813\n",
       "Time:                        00:03:30   Log-Likelihood:                -1796.9\n",
       "No. Observations:                1996   AIC:                             3598.\n",
       "Df Residuals:                    1994   BIC:                             3609.\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "Intercept      0.7496      0.014     53.468      0.000       0.722       0.777\n",
       "NET_BUY        0.0012      0.001      1.744      0.081      -0.000       0.002\n",
       "==============================================================================\n",
       "Omnibus:                     1102.372   Durbin-Watson:                   1.869\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):            13345.109\n",
       "Skew:                           2.347   Prob(JB):                         0.00\n",
       "Kurtosis:                      14.765   Cond. No.                         22.1\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg = sm.OLS.from_formula(\"RETURN ~ NET_BUY\", df_fn_0319).fit()\n",
    "reg.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**회귀분석 그래프 그리기(with.seaborn)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x205ab9d9220>"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.lmplot(x=\"NET_BUY\", y=\"RETURN\", data=df_fn_0319,robust = True,line_kws={'color':\"red\"}, scatter_kws={'edgecolor':\"white\"}, x_jitter=.9)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 20개로 그룹화하여 다시 상관관계 분석하기"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**수익률을 기준으로 정렬**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RETURN</th>\n",
       "      <th>NET_BUY</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NAME</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>에프에스티</th>\n",
       "      <td>5.8077</td>\n",
       "      <td>8.597538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>빅텍</th>\n",
       "      <td>5.7930</td>\n",
       "      <td>19.559902</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>제테마</th>\n",
       "      <td>5.2704</td>\n",
       "      <td>2.034237</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>비디아이</th>\n",
       "      <td>5.1196</td>\n",
       "      <td>2.780843</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>스페코</th>\n",
       "      <td>4.5407</td>\n",
       "      <td>7.901801</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>세화아이엠씨</th>\n",
       "      <td>-0.3070</td>\n",
       "      <td>0.140534</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>엠벤처투자</th>\n",
       "      <td>-0.3634</td>\n",
       "      <td>0.255083</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>코드네이처</th>\n",
       "      <td>-0.4884</td>\n",
       "      <td>0.014204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>컨버즈</th>\n",
       "      <td>-0.5684</td>\n",
       "      <td>0.266422</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>이더블유케이</th>\n",
       "      <td>-0.6048</td>\n",
       "      <td>3.803334</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1996 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        RETURN    NET_BUY\n",
       "NAME                     \n",
       "에프에스티   5.8077   8.597538\n",
       "빅텍      5.7930  19.559902\n",
       "제테마     5.2704   2.034237\n",
       "비디아이    5.1196   2.780843\n",
       "스페코     4.5407   7.901801\n",
       "...        ...        ...\n",
       "세화아이엠씨 -0.3070   0.140534\n",
       "엠벤처투자  -0.3634   0.255083\n",
       "코드네이처  -0.4884   0.014204\n",
       "컨버즈    -0.5684   0.266422\n",
       "이더블유케이 -0.6048   3.803334\n",
       "\n",
       "[1996 rows x 2 columns]"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_fn_0319 = df_fn_0319.sort_values(by = ['RETURN'],axis=0,ascending = False)\n",
    "df_fn_0319"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**20개의 그룹으로나눈다 1996개의 개별종목이므로 100개의 개별종목의 포트폴리오가 19개이고 마지막 포트폴리오는 96개**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_fn_0319_1 = df_fn_0319.iloc[:99,:]\n",
    "df_fn_0319_2 = df_fn_0319.iloc[100:199,:]\n",
    "df_fn_0319_3 = df_fn_0319.iloc[200:299,:]\n",
    "df_fn_0319_4 = df_fn_0319.iloc[300:399,:]\n",
    "df_fn_0319_5 = df_fn_0319.iloc[400:499,:]\n",
    "df_fn_0319_6= df_fn_0319.iloc[500:599,:]\n",
    "df_fn_0319_7= df_fn_0319.iloc[600:699,:]\n",
    "df_fn_0319_8= df_fn_0319.iloc[700:799,:]\n",
    "df_fn_0319_9= df_fn_0319.iloc[800:899,:]\n",
    "df_fn_0319_10= df_fn_0319.iloc[900:999,:]\n",
    "df_fn_0319_11= df_fn_0319.iloc[1000:1099,:]\n",
    "df_fn_0319_12= df_fn_0319.iloc[1100:1199,:]\n",
    "df_fn_0319_13= df_fn_0319.iloc[1200:1299,:]\n",
    "df_fn_0319_14= df_fn_0319.iloc[1300:1399,:]\n",
    "df_fn_0319_15= df_fn_0319.iloc[1400:1499,:]\n",
    "df_fn_0319_16= df_fn_0319.iloc[1500:1599,:]\n",
    "df_fn_0319_17= df_fn_0319.iloc[1600:1699,:]\n",
    "df_fn_0319_18= df_fn_0319.iloc[1700:1799,:]\n",
    "df_fn_0319_19= df_fn_0319.iloc[1800:1899,:]\n",
    "df_fn_0319_20= df_fn_0319.iloc[1900:1995,:]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**포트폴리오별 평균 수익률과 평균 외인 순매수량을 구한다.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_group = (df_fn_0319_1,df_fn_0319_2,df_fn_0319_3,df_fn_0319_4,df_fn_0319_5,df_fn_0319_6,df_fn_0319_7,df_fn_0319_8,df_fn_0319_9,df_fn_0319_10,df_fn_0319_11,df_fn_0319_12,df_fn_0319_13,df_fn_0319_14,df_fn_0319_15,df_fn_0319_16,df_fn_0319_17,df_fn_0319_18,df_fn_0319_19,df_fn_0319_20)\n",
    "group_fn_20=[]\n",
    "for df in df_group:\n",
    "    mean_df_fn_0319 = df.mean()\n",
    "    data = [[mean_df_fn_0319['RETURN'],mean_df_fn_0319['NET_BUY']]]\n",
    "    df_group_done = pd.DataFrame(data,columns = ['RETURN','NET_BUY'])\n",
    "    group_fn_20.append(df_group_done)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**나눈 그룹들을 다시 합쳐준다**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_fn_0319_1 = group_fn_20[0]\n",
    "df_fn_0319_2 = group_fn_20[1]\n",
    "df_fn_0319_3 = group_fn_20[2]\n",
    "df_fn_0319_4 = group_fn_20[3] \n",
    "df_fn_0319_5 = group_fn_20[4]\n",
    "df_fn_0319_6= group_fn_20[5]\n",
    "df_fn_0319_7= group_fn_20[6]\n",
    "df_fn_0319_8= group_fn_20[7]\n",
    "df_fn_0319_9= group_fn_20[8]\n",
    "df_fn_0319_10= group_fn_20[9]\n",
    "df_fn_0319_11= group_fn_20[10]\n",
    "df_fn_0319_12= group_fn_20[11]\n",
    "df_fn_0319_13= group_fn_20[12]\n",
    "df_fn_0319_14= group_fn_20[13]\n",
    "df_fn_0319_15= group_fn_20[14]\n",
    "df_fn_0319_16= group_fn_20[15]\n",
    "df_fn_0319_17= group_fn_20[16]\n",
    "df_fn_0319_18= group_fn_20[17]\n",
    "df_fn_0319_19= group_fn_20[18]\n",
    "df_fn_0319_20= group_fn_20[19]\n",
    "\n",
    "df_fn_0319_20_GROUP = pd.concat([df_fn_0319_1,df_fn_0319_2,df_fn_0319_3,df_fn_0319_4,df_fn_0319_5,df_fn_0319_6,df_fn_0319_7,df_fn_0319_8,df_fn_0319_9,df_fn_0319_10,df_fn_0319_11,df_fn_0319_12,df_fn_0319_13,df_fn_0319_14,df_fn_0319_15,df_fn_0319_16,df_fn_0319_17,df_fn_0319_18,df_fn_0319_19,df_fn_0319_20],axis = 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**나눈 그룹들을 이제 하나의 DataFrame으로 통합시켜 회귀분석을 할 준비를 한다**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RETURN</th>\n",
       "      <th>NET_BUY</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.489312</td>\n",
       "      <td>7.356777</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.605039</td>\n",
       "      <td>5.509656</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.309073</td>\n",
       "      <td>9.144939</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.148066</td>\n",
       "      <td>12.182618</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.031135</td>\n",
       "      <td>7.358046</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.934536</td>\n",
       "      <td>6.528059</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.863380</td>\n",
       "      <td>7.163410</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.793494</td>\n",
       "      <td>4.296930</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.734421</td>\n",
       "      <td>3.571965</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.682052</td>\n",
       "      <td>3.323148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.628245</td>\n",
       "      <td>5.446756</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.578406</td>\n",
       "      <td>6.235504</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.522471</td>\n",
       "      <td>8.790935</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.474516</td>\n",
       "      <td>5.473386</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.423178</td>\n",
       "      <td>5.241596</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.370665</td>\n",
       "      <td>9.867261</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.302134</td>\n",
       "      <td>6.289465</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.215905</td>\n",
       "      <td>8.312728</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.075766</td>\n",
       "      <td>5.332569</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.048595</td>\n",
       "      <td>2.581359</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     RETURN    NET_BUY\n",
       "0  2.489312   7.356777\n",
       "0  1.605039   5.509656\n",
       "0  1.309073   9.144939\n",
       "0  1.148066  12.182618\n",
       "0  1.031135   7.358046\n",
       "0  0.934536   6.528059\n",
       "0  0.863380   7.163410\n",
       "0  0.793494   4.296930\n",
       "0  0.734421   3.571965\n",
       "0  0.682052   3.323148\n",
       "0  0.628245   5.446756\n",
       "0  0.578406   6.235504\n",
       "0  0.522471   8.790935\n",
       "0  0.474516   5.473386\n",
       "0  0.423178   5.241596\n",
       "0  0.370665   9.867261\n",
       "0  0.302134   6.289465\n",
       "0  0.215905   8.312728\n",
       "0  0.075766   5.332569\n",
       "0 -0.048595   2.581359"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_fn_0319_20_GROUP"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**회귀분석 시행(독립변수 : 포트폴리오별 평균 외인순매수 / 종속변수 : 포트폴리오별 평균 수익률)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>         <td>RETURN</td>      <th>  R-squared:         </th> <td>   0.072</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.021</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   1.401</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Sun, 29 Nov 2020</td> <th>  Prob (F-statistic):</th>  <td> 0.252</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>00:18:49</td>     <th>  Log-Likelihood:    </th> <td> -16.172</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>    20</td>      <th>  AIC:               </th> <td>   36.34</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>    18</td>      <th>  BIC:               </th> <td>   38.34</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th> <td>    0.3290</td> <td>    0.383</td> <td>    0.859</td> <td> 0.402</td> <td>   -0.476</td> <td>    1.134</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>NET_BUY</th>   <td>    0.0658</td> <td>    0.056</td> <td>    1.184</td> <td> 0.252</td> <td>   -0.051</td> <td>    0.183</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>12.828</td> <th>  Durbin-Watson:     </th> <td>   0.238</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.002</td> <th>  Jarque-Bera (JB):  </th> <td>  10.961</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 1.400</td> <th>  Prob(JB):          </th> <td> 0.00417</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 5.304</td> <th>  Cond. No.          </th> <td>    21.0</td>\n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                 RETURN   R-squared:                       0.072\n",
       "Model:                            OLS   Adj. R-squared:                  0.021\n",
       "Method:                 Least Squares   F-statistic:                     1.401\n",
       "Date:                Sun, 29 Nov 2020   Prob (F-statistic):              0.252\n",
       "Time:                        00:18:49   Log-Likelihood:                -16.172\n",
       "No. Observations:                  20   AIC:                             36.34\n",
       "Df Residuals:                      18   BIC:                             38.34\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "Intercept      0.3290      0.383      0.859      0.402      -0.476       1.134\n",
       "NET_BUY        0.0658      0.056      1.184      0.252      -0.051       0.183\n",
       "==============================================================================\n",
       "Omnibus:                       12.828   Durbin-Watson:                   0.238\n",
       "Prob(Omnibus):                  0.002   Jarque-Bera (JB):               10.961\n",
       "Skew:                           1.400   Prob(JB):                      0.00417\n",
       "Kurtosis:                       5.304   Cond. No.                         21.0\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg = sm.OLS.from_formula(\"RETURN ~ NET_BUY\", df_fn_0319_20_GROUP).fit()\n",
    "reg.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**회귀분석 그래프 그리기(with.seaborn)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x205ab920d60>"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.lmplot(x=\"NET_BUY\", y=\"RETURN\", data=df_fn_0319_20_GROUP,robust = True,line_kws={'color':\"red\"}, scatter_kws={'edgecolor':\"white\"}, x_jitter=.9)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
